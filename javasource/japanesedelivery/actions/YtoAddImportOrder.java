// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package japanesedelivery.actions;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import japanesedelivery.proxies.ZtoImportBcOrder;
import japanesedelivery.proxies.ZtoIntlImportOrderResp;
import japanesedelivery.proxies.ZtoIntlOrderItem;
import japanesedelivery.proxies.ZtoOrderEntity;
import japanesedelivery.proxies.ChannelConfig;
import org.apache.commons.codec.binary.Base64;
import java.io.IOException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.Map;

public class YtoAddImportOrder extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __ztoImportBcOrder;
	private japanesedelivery.proxies.ZtoImportBcOrder ztoImportBcOrder;
	private java.util.List<IMendixObject> __ztoIntlOrderItemList;
	private java.util.List<japanesedelivery.proxies.ZtoIntlOrderItem> ztoIntlOrderItemList;
	private IMendixObject __ztoOrderEntity;
	private japanesedelivery.proxies.ZtoOrderEntity ztoOrderEntity;
	private IMendixObject __channelConfig;
	private japanesedelivery.proxies.ChannelConfig channelConfig;

	public YtoAddImportOrder(IContext context, IMendixObject ztoImportBcOrder, java.util.List<IMendixObject> ztoIntlOrderItemList, IMendixObject ztoOrderEntity, IMendixObject channelConfig)
	{
		super(context);
		this.__ztoImportBcOrder = ztoImportBcOrder;
		this.__ztoIntlOrderItemList = ztoIntlOrderItemList;
		this.__ztoOrderEntity = ztoOrderEntity;
		this.__channelConfig = channelConfig;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.ztoImportBcOrder = this.__ztoImportBcOrder == null ? null : japanesedelivery.proxies.ZtoImportBcOrder.initialize(getContext(), __ztoImportBcOrder);

		this.ztoIntlOrderItemList = java.util.Optional.ofNullable(this.__ztoIntlOrderItemList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__ztoIntlOrderItemListElement -> japanesedelivery.proxies.ZtoIntlOrderItem.initialize(getContext(), __ztoIntlOrderItemListElement))
			.collect(java.util.stream.Collectors.toList());

		this.ztoOrderEntity = this.__ztoOrderEntity == null ? null : japanesedelivery.proxies.ZtoOrderEntity.initialize(getContext(), __ztoOrderEntity);

		this.channelConfig = this.__channelConfig == null ? null : japanesedelivery.proxies.ChannelConfig.initialize(getContext(), __channelConfig);

		// BEGIN USER CODE
        ILogNode logger = Core.getLogger("YtoAddImportOrder");
        
        try {
            // 检查必要的参数
            if (channelConfig == null) {
                logger.error("ChannelConfig is null");
                throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Channel configuration is missing!");
            }
            
            if (ztoImportBcOrder == null) {
                logger.error("ZtoImportBcOrder is null");
                throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Import order data is missing!");
            }
            
            if (ztoOrderEntity == null) {
                logger.error("ZtoOrderEntity is null");
                throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Order entity data is missing!");
            }
            
            // 验证必填字段
            validateRequiredFields(ztoImportBcOrder, ztoIntlOrderItemList, channelConfig);
            
            // Build Yto API request parameters
              JSONObject yuanTongOrderParams = buildYtoOrderParams(ztoImportBcOrder, ztoOrderEntity, ztoIntlOrderItemList);
              
              // Call Yto API
              String response = callYtoApi(yuanTongOrderParams);
             
             // Parse Yto API response
            IMendixObject respVO = parseYtoResponse(response);
            
            return respVO;
            
        } catch (Exception e) {
            logger.error("Error in YtoAddImportOrder: " + e.getMessage(), e);
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Abnormal interface of the courier company!");
        }
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "YtoAddImportOrder";
	}

	// BEGIN EXTRA CODE
    /**
     * 验证API必填字段
     */
    private void validateRequiredFields(ZtoImportBcOrder order, java.util.List<ZtoIntlOrderItem> itemList, ChannelConfig config) {
        ILogNode logger = Core.getLogger("YtoAddImportOrder");
        
        // 基础信息必填字段验证
        if (order.getorderId() == null || order.getorderId().trim().isEmpty()) {
            logger.error("orderId is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("订单号(orderId)为必填项!");
        }
        
        if (config.getwarehouseCode() == null || config.getwarehouseCode().trim().isEmpty()) {
            logger.error("transportModeCode is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("产品代码(transportModeCode)为必填项!");
        }
        
        // 发件人信息必填字段验证
        if (order.getshipper() == null || order.getshipper().trim().isEmpty()) {
            logger.error("shipper name is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("发件人姓名为必填项!");
        }
        
        if (order.getshipperAddress() == null || order.getshipperAddress().trim().isEmpty()) {
            logger.error("shipper address is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("发件人地址为必填项!");
        }
        
        if (order.getshipperMobile() == null || order.getshipperMobile().trim().isEmpty()) {
            logger.error("shipper mobile is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("发件人手机号为必填项!");
        }
        
        // 收件人信息必填字段验证
        if (order.getconsignee() == null || order.getconsignee().trim().isEmpty()) {
            logger.error("consignee name is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("收件人姓名为必填项!");
        }
        
        if (order.getconsigneeProv() == null || order.getconsigneeProv().trim().isEmpty()) {
            logger.error("consignee provinceName is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("收件人省份为必填项!");
        }
        
        if (order.getconsigneeCity() == null || order.getconsigneeCity().trim().isEmpty()) {
            logger.error("consignee cityName is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("收件人城市为必填项!");
        }
        
        if (order.getconsigneeDistrict() == null || order.getconsigneeDistrict().trim().isEmpty()) {
            logger.error("consignee areaName is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("收件人区域为必填项!");
        }
        
        if (order.getconsigneeAddress() == null || order.getconsigneeAddress().trim().isEmpty()) {
            logger.error("consignee address is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("收件人详细地址为必填项!");
        }
        
        // 收件人邮编为空时设置默认值510000
        if (order.getconsigneeZipCode() == null || order.getconsigneeZipCode().trim().isEmpty()) {
            logger.info("consignee postCode is empty, setting default value 510000");
            order.setconsigneeZipCode("510000");
        }
        
        if (order.getconsigneeMobile() == null || order.getconsigneeMobile().trim().isEmpty()) {
            logger.error("consignee mobile is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("收件人手机号为必填项!");
        }
        
        // 申报品信息必填字段验证
        if (itemList == null || itemList.isEmpty()) {
            logger.error("orderInvoices is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("申报品信息为必填项!");
        }
        
        for (int i = 0; i < itemList.size(); i++) {
            ZtoIntlOrderItem item = itemList.get(i);
            String itemPrefix = "申报品[" + (i + 1) + "]";
            
            if (item.getitemName() == null || item.getitemName().trim().isEmpty()) {
                 logger.error("orderInvoices[" + i + "].ename/cname is required");
                 throw new com.mendix.systemwideinterfaces.MendixRuntimeException(itemPrefix + "品名(ename/cname)为必填项!");
             }
            
            if (item.getitemQuantity() == null || item.getitemQuantity() <= 0) {
                logger.error("orderInvoices[" + i + "].quantity is required");
                throw new com.mendix.systemwideinterfaces.MendixRuntimeException(itemPrefix + "数量(quantity)为必填项且必须大于0!");
            }
            
            if (item.getitemUnit() == null || item.getitemUnit().trim().isEmpty()) {
                logger.error("orderInvoices[" + i + "].unit is required");
                throw new com.mendix.systemwideinterfaces.MendixRuntimeException(itemPrefix + "单位(unit)为必填项!");
            }
            
            if (item.getitemUnitPrice() == null || item.getitemUnitPrice().doubleValue() <= 0) {
                logger.error("orderInvoices[" + i + "].unitPrice is required");
                throw new com.mendix.systemwideinterfaces.MendixRuntimeException(itemPrefix + "单价(unitPrice)为必填项且必须大于0!");
            }
        }
        
        // 渠道配置必填字段验证
        if (config.getsecretKey() == null || config.getsecretKey().trim().isEmpty()) {
            logger.error("secretKey is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("密钥(secretKey)为必填项!");
        }
        
        if (config.geturlAddress() == null || config.geturlAddress().trim().isEmpty()) {
            logger.error("urlAddress is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("接口地址(urlAddress)为必填项!");
        }
        
        if (config.getappCode() == null || config.getappCode().trim().isEmpty()) {
            logger.error("appCode is required");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("应用代码(appCode)为必填项!");
        }
    }
    
    private JSONObject buildYtoOrderParams(ZtoImportBcOrder order, ZtoOrderEntity orderEntity, java.util.List<ZtoIntlOrderItem> itemList) {
          JSONObject jsonObject = new JSONObject();
          String transportModeCode = channelConfig.getwarehouseCode();
          
          // Basic information
          jsonObject.put("orderId", order.getorderId()); // Order ID, globally unique
          jsonObject.put("transportModeCode", transportModeCode); // Product code, use PC19232 for testing; PC19188 for product

          jsonObject.put("weight", order.getweight()); // Order weight
          jsonObject.put("weightUnit", "KG"); // Weight unit
          jsonObject.put("piece", 1); // Total package count
          jsonObject.put("declareType", 4); // Package type 4-other (default)
          jsonObject.put("remark", orderEntity != null ? orderEntity.getremark() : ""); // Order remark
          
          // Shipper information
          JSONObject shipper = new JSONObject();
          shipper.put("name", order.getshipper());
          shipper.put("countryCode", "JP"); // Japan - 使用countryCode而不是country
          shipper.put("address", order.getshipperAddress());
          shipper.put("mobile", order.getshipperMobile());
          jsonObject.put("shipper", shipper);
          
          // Consignee information
          JSONObject consignee = new JSONObject();
          consignee.put("name", order.getconsignee());
          consignee.put("countryCode", "CN"); // China - 使用countryCode而不是country
          consignee.put("provinceName", order.getconsigneeProv());
          consignee.put("cityName", order.getconsigneeCity());
          consignee.put("areaName", order.getconsigneeDistrict());
          consignee.put("address", order.getconsigneeAddress());
          consignee.put("postCode", order.getconsigneeZipCode());
          consignee.put("mobile", order.getconsigneeMobile());
          jsonObject.put("consignee", consignee);
          
          // Invoice information
          JSONArray orderInvoices = new JSONArray();
          for (ZtoIntlOrderItem item : itemList) {
              JSONObject invoice = new JSONObject();
              invoice.put("ename", item.getitemName()); // English name
              invoice.put("cname", item.getitemName()); // Chinese name
              invoice.put("quantity", item.getitemQuantity()); // Quantity
              invoice.put("unit", item.getitemUnit()); // Unit
              invoice.put("unitPrice", item.getitemUnitPrice()); // Unit price
              invoice.put("currencyCode", item.getcurrencyType() != null ? item.getcurrencyType() : "USD"); // Currency
              orderInvoices.add(invoice);
          }
          jsonObject.put("orderInvoices", orderInvoices);
          
          // Order extra services (optional)
          JSONArray orderExtraServices = new JSONArray();
          jsonObject.put("orderExtraServices", orderExtraServices);
          
          return jsonObject;
      }
     
     private String callYtoApi(JSONObject params) throws Exception {
         ILogNode logger = Core.getLogger("YtoAddImportOrder");
         
         String secretKey = channelConfig.getsecretKey();
         String urlAddress = channelConfig.geturlAddress();
         String appCode = channelConfig.getappCode();
         
         String message = params.toJSONString();
         
         // Build request headers
          Map<String, String> headers = new HashMap<>();
          headers.put("Content-Type", "application/json");
          headers.put("data_digest", md5AndBase64(message.replaceAll("[\\t\\n\\r]", ""), secretKey));
          headers.put("partner_code", appCode);
          headers.put("msg_type", "PLACE_ORDER");
          headers.put("msg_id", String.valueOf(System.currentTimeMillis()));
          headers.put("Accept-Language", "zh-cn");
          logger.info("Yto request url: " + urlAddress);
          logger.info("Yto request: " + message);
          
          // Send HTTP request
         HttpResponse<String> response = doPost(urlAddress, headers, URLEncoder.encode(message, "UTF-8"));
         
         if (response.statusCode() == 200) {
             String responseJson = response.body();
             logger.info("Yto response: " + responseJson);
             return responseJson;
         } else {
             throw new Exception("HTTP request failed with status: " + response.statusCode());
         }
     }
     
     private IMendixObject parseYtoResponse(String response) throws Exception {
         ILogNode logger = Core.getLogger("YtoAddImportOrder");
         
         String code = "";
         String message = "";
         String messageDetail = "";
         String logisticsId = "";
         String orderId = "";
         String orderNo = "";
         String cenCode = "";
         String mark = "";
         Boolean success = false;
         
         IMendixObject respVO = Core.instantiate(getContext(), ZtoIntlImportOrderResp.getType());
         
         try {
             JSONObject responseJson = JSON.parseObject(response);
             success = responseJson.getBoolean("status");
             code = responseJson.getString("errorCode");
             message = responseJson.getString("errorMsg");
             
             if (success) {
                 // Success case - extract data
                 JSONObject data = responseJson.getJSONObject("data");
                 if (data != null) {
                    orderId = data.getString("orderId");
                    orderNo = data.getString("channelHawbcode"); 
                    logisticsId = data.getString("serverHawbcode");
                    cenCode = data.getString("cenCode"); 
                    mark = data.getString("distributeCode"); // For YTO, distributeCode is used as mark
                 }
                 messageDetail = response;
             } else {
                 // Handle specific error codes
                 if ("S19".equals(code)) {
                    // Order already exists - try to extract waybill number if available
                    JSONObject data = responseJson.getJSONObject("data");
                    if (data != null) {
                        orderId = data.getString("orderId");
                        orderNo = data.getString("channelHawbcode"); 
                        logisticsId = data.getString("serverHawbcode");
                        cenCode = data.getString("cenCode"); 
                        mark = data.getString("distributeCode"); // For YTO, distributeCode is used as mark
                    }
                 }
                 messageDetail = response;
             }
         } catch (Exception e) {
             logger.error("Failed to parse Yto response: " + e.getMessage(), e);
             success = false;
             message = "Response parsing failed: " + e.getMessage();
             messageDetail = response;
         }
         
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.logisticsId), logisticsId);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.orderId), orderId);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.orderNo), orderNo);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.extended), cenCode);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.mark), mark);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.message), message);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.messageDetail), messageDetail);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.code), code);
         respVO.setValue(this.getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.success), success);
         
         return respVO;
     }
    
    /**
      * Send HTTP POST request
      */
     public HttpResponse<String> doPost(String url, Map<String, String> headers, String body) throws Exception {
         HttpClient httpClient = HttpClient.newHttpClient();
         
         HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()
             .uri(URI.create(url))
             .POST(HttpRequest.BodyPublishers.ofString(body, StandardCharsets.UTF_8));
         
         // Set request headers
         for (Map.Entry<String, String> entry : headers.entrySet()) {
             requestBuilder.header(entry.getKey(), entry.getValue());
         }
         
         HttpRequest request = requestBuilder.build();
         return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
     }
     
     /**
      * MD5 encryption and Base64 encoding
      */
     public String md5AndBase64(String message, String key) throws Exception {
         MessageDigest messagedigest = MessageDigest.getInstance("MD5");
         String data = message + key;
         messagedigest.update(data.getBytes("UTF-8"));
         byte[] baseStr = Base64.encodeBase64(messagedigest.digest());
         return new String(baseStr);
     }


	// END EXTRA CODE
}
