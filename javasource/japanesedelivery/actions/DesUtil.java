// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package japanesedelivery.actions;

import cn.hutool.crypto.SecureUtil;
import cn.hutool.crypto.symmetric.DES;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import org.apache.commons.codec.binary.Base64;
import com.mendix.logging.ILogNode;
import com.mendix.core.Core;

public class DesUtil extends CustomJavaAction<java.lang.String>
{
	private java.lang.String secretKey;
	private java.lang.String data;
	private java.lang.String methodType;

	public DesUtil(IContext context, java.lang.String secretKey, java.lang.String data, java.lang.String methodType)
	{
		super(context);
		this.secretKey = secretKey;
		this.data = data;
		this.methodType = methodType;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
        ILogNode logger = Core.getLogger("JapaneseDelivery Secure");
        String resultData = "";
        if (methodType == "encrypt") {
            // 加密
            resultData = DesUtil.encrypt(data, secretKey);
            logger.info("入参：" + data + "；加密结果:" + resultData);
        } else if (methodType == "decrypt") {
            // 解密
            resultData = DesUtil.decode(data, secretKey);
            logger.info("入参：" + data + "；解密结果:" + resultData);
        }
        return resultData;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DesUtil";
	}

	// BEGIN EXTRA CODE

    /**
     * 加密
     *
     * @param info
     * @return
     */
    public static String encrypt(String info, String secretKey) {
        byte[] key = new byte[0];
        key = Base64.decodeBase64(secretKey);
        DES des = SecureUtil.des(key);
        String encrypt = des.encryptHex(info);
        return encrypt;
    }

    /**
     * 解密
     *
     * @param encrypt
     * @return
     */
    public static String decode(String encrypt, String secretKey) {
        byte[] key = new byte[0];
        key = Base64.decodeBase64(secretKey);
        DES des = SecureUtil.des(key);
        return des.decryptStr(encrypt);
    }
	// END EXTRA CODE
}
