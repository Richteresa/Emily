// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package japanesedelivery.actions;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import japanesedelivery.proxies.ZtoImportBcOrder;
import japanesedelivery.proxies.ZtoIntlImportOrderResp;
import japanesedelivery.proxies.ZtoIntlOrderItem;
import japanesedelivery.proxies.ZtoOrderEntity;
import java.io.IOException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.math.BigDecimal;

public class QunhuiSFAddImportOrder extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __ztoImportBcOrder;
	private japanesedelivery.proxies.ZtoImportBcOrder ztoImportBcOrder;
	private java.util.List<IMendixObject> __ztoIntlOrderItemList;
	private java.util.List<japanesedelivery.proxies.ZtoIntlOrderItem> ztoIntlOrderItemList;
	private IMendixObject __ztoOrderEntity;
	private japanesedelivery.proxies.ZtoOrderEntity ztoOrderEntity;
	private IMendixObject __channelConfig;
	private japanesedelivery.proxies.ChannelConfig channelConfig;

	public QunhuiSFAddImportOrder(IContext context, IMendixObject ztoImportBcOrder, java.util.List<IMendixObject> ztoIntlOrderItemList, IMendixObject ztoOrderEntity, IMendixObject channelConfig)
	{
		super(context);
		this.__ztoImportBcOrder = ztoImportBcOrder;
		this.__ztoIntlOrderItemList = ztoIntlOrderItemList;
		this.__ztoOrderEntity = ztoOrderEntity;
		this.__channelConfig = channelConfig;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.ztoImportBcOrder = this.__ztoImportBcOrder == null ? null : japanesedelivery.proxies.ZtoImportBcOrder.initialize(getContext(), __ztoImportBcOrder);

		this.ztoIntlOrderItemList = java.util.Optional.ofNullable(this.__ztoIntlOrderItemList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__ztoIntlOrderItemListElement -> japanesedelivery.proxies.ZtoIntlOrderItem.initialize(getContext(), __ztoIntlOrderItemListElement))
			.collect(java.util.stream.Collectors.toList());

		this.ztoOrderEntity = this.__ztoOrderEntity == null ? null : japanesedelivery.proxies.ZtoOrderEntity.initialize(getContext(), __ztoOrderEntity);

		this.channelConfig = this.__channelConfig == null ? null : japanesedelivery.proxies.ChannelConfig.initialize(getContext(), __channelConfig);

		// BEGIN USER CODE
        ILogNode logger = Core.getLogger("JapaneseDelivery");
        
        // 检查必要的参数
        if (channelConfig == null) {
            logger.error("ChannelConfig is null");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Channel configuration is missing!");
        }
        
        if (ztoImportBcOrder == null) {
            logger.error("ZtoImportBcOrder is null");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Import order data is missing!");
        }
        
        if (ztoOrderEntity == null) {
            logger.error("ZtoOrderEntity is null");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Order entity data is missing!");
        }
        
        Map<String, Object> orderParams = createQunhuiOrderParams(ztoImportBcOrder, ztoOrderEntity, ztoIntlOrderItemList);
        String secretKey = channelConfig.getsecretKey();
        String appKey = channelConfig.getappCode();
        
        if (secretKey == null || secretKey.trim().isEmpty()) {
            logger.error("SecretKey is null or empty");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Channel secret key is missing!");
        }
        
        if (appKey == null || appKey.trim().isEmpty()) {
            logger.error("AppKey is null or empty");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Channel app key is missing!");
        }

        String code = "";
        String message = "";
        String messageDetail = "";
        String logisticsId = "";
        String orderId = "";
        String orderNo = "";
        String extended = "";
        String mark = "";

        // 群辉接口地址
        String urlAddress = channelConfig.geturlAddress();
        if (urlAddress == null || urlAddress.trim().isEmpty()) {
            logger.error("URL address is null or empty");
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Channel URL address is missing!");
        }
        String apiPath = "/qh-ocenter-api-web/api/expressorder/expressno";
        IMendixObject respVO = Core.instantiate(getContext(), ZtoIntlImportOrderResp.getType());
        try {
            String invokeResult = invokeQunhui(urlAddress + apiPath, appKey, secretKey, orderParams);
            logger.info("Qunhui API response: " + invokeResult);
            
            JSONObject responseBody = JSONObject.parseObject(invokeResult);
            Boolean success = (Boolean) responseBody.get("success");
            Integer responseCode = (Integer) responseBody.get("code");
            
            if (success && responseCode == 0) {
                JSONObject data = (JSONObject) responseBody.get("data");
                if (data != null) {
                    logisticsId = (String) data.get("expressNo");
                    orderId = (String) data.get("cusOrderNo");
                    orderNo = (String) data.get("orderNo");
                    // 将distributeCode放入mark字段
                    mark = (String) data.get("distributeCode");
                }
                // 即使订单已存在，也设置消息信息
                message = (String) responseBody.get("msg");
                messageDetail = message;
            } else {
                code = String.valueOf(responseCode);
                // 优化错误信息处理
                String rawMessage = (String) responseBody.get("msg");
                String rawData = (String) responseBody.get("data");
                
                // 提取有用的错误信息
                message = extractErrorMessage(rawMessage, rawData);
                messageDetail = rawMessage; // 保留原始错误信息作为详细信息
            }
            
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.logisticsId), logisticsId);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.orderId), orderId);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.orderNo), orderNo);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.extended), extended);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.mark), mark);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.message), message);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.messageDetail), messageDetail);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.code), code);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.success), success && responseCode == 0);
            return respVO;
        } catch (Exception e) {
            logger.error("Qunhui API call failed: " + e.getMessage(), e);
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Abnormal interface of the courier company!");
        }
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "QunhuiSFAddImportOrder";
	}

	// BEGIN EXTRA CODE
    public String invokeQunhui(String url, String appKey, String secretKey, Map<String, Object> params) throws Exception {
        ILogNode logger = Core.getLogger("JapaneseDelivery");
        
        // 生成时间戳
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String timestamp = sdf.format(new Date());
        
        // 生成签名
        String sign = generateSign(params, secretKey);
        
        // 构建请求体 - 移除null值
        Map<String, Object> filteredParams = new HashMap<>();
        for (Map.Entry<String, Object> entry : params.entrySet()) {
            if (entry.getValue() != null) {
                filteredParams.put(entry.getKey(), entry.getValue());
            }
        }
        String requestBody = com.alibaba.fastjson.JSONObject.toJSONString(filteredParams, 
            SerializerFeature.MapSortField);
        
        logger.info("Qunhui request: url=" + url + "; params=" + requestBody + "; sign=" + sign);
        
        // 发送HTTP请求
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Content-Type", "application/json")
                .header("app_key", appKey)
                .header("sign", sign)
                .header("timestamp", timestamp)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody, StandardCharsets.UTF_8))
                .build();
        
        logger.info("Request headers: app_key=" + appKey + ", sign=" + sign + ", timestamp=" + timestamp);
        String jsonForSign = com.alibaba.fastjson.JSONObject.toJSONString(filteredParams, 
            SerializerFeature.MapSortField);
        logger.info("Request body for sign generation: " + jsonForSign);
        logger.info("Sign generation string: " + secretKey + jsonForSign + secretKey);
        logger.info("Generated sign: " + sign);
        logger.info("Secret key length: " + secretKey.length());
        logger.info("JSON string length: " + jsonForSign.length());
        
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        return response.body();
    }
    
    private String generateSign(Map<String, Object> params, String secretKey) throws Exception {
        // 移除null值的参数
        Map<String, Object> filteredParams = new HashMap<>();
        for (Map.Entry<String, Object> entry : params.entrySet()) {
            if (entry.getValue() != null) {
                filteredParams.put(entry.getKey(), entry.getValue());
            }
        }
        
        // 按照API文档要求，使用fastjson的SerializerFeature.MapSortField进行ASCII码排序
        String jsonString = com.alibaba.fastjson.JSONObject.toJSONString(filteredParams, 
            SerializerFeature.MapSortField);
        
        // 生成MD5签名: md5(密钥+JsonString+密钥)
        String signData = secretKey + jsonString + secretKey;
        
        // 使用与参考代码相同的MD5加密方式
        byte[] digest = encryptMD5(signData);
        
        // 按照对方提供的参考代码转换为32位大写字符串
        return byte2hex(digest);
    }
    
    private byte[] encryptMD5(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            return md.digest(data.getBytes(StandardCharsets.UTF_8));
        } catch (Exception e) {
            throw new RuntimeException("MD5 encryption failed", e);
        }
    }
    
    private String byte2hex(byte[] bytes) {
        StringBuilder sign = new StringBuilder();
        for (byte aByte : bytes) {
            String hex = Integer.toHexString(aByte & 0xFF);
            if (hex.length() == 1) {
                sign.append("0");
            }
            sign.append(hex.toUpperCase());
        }
        return sign.toString();
    }

    private static Map<String, Object> createQunhuiOrderParams(ZtoImportBcOrder ztoImportBcOrder, ZtoOrderEntity ztoOrderEntity, java.util.List<ZtoIntlOrderItem> ztoIntlOrderItemList) throws Exception {
        // 创建群辉API参数
        Map<String, Object> params = new HashMap<>();
        
        // 检查必要参数
        if (ztoImportBcOrder == null) {
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("ZtoImportBcOrder cannot be null");
        }
        
        if (ztoOrderEntity == null) {
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("ZtoOrderEntity cannot be null");
        }
        
        // 基本订单信息
        params.put("cusOrderNo", ztoImportBcOrder.getorderId());
        params.put("expressServerType", "GNQG"); // 快递业务类型，必填，使用字符串
        params.put("expressSupplier", "ZTO"); // 快递商代码，必填
        
        // 发件人信息 - 使用API要求的字段名
        params.put("sender", ztoImportBcOrder.getshipper());
        params.put("senderTel", ztoImportBcOrder.getshipperMobile());
        params.put("senderProvince", ztoImportBcOrder.getshipperProv());
        params.put("senderCity", ztoImportBcOrder.getshipperCity());
        params.put("senderCounty", ztoImportBcOrder.getshipperDistrict());
        params.put("senderAddress", ztoImportBcOrder.getshipperAddress());
        params.put("senderCountry", "JP"); // 发件人国别代码，必填
        
        // 收件人信息 - 使用API要求的字段名
        params.put("consignee", ztoImportBcOrder.getconsignee());
        params.put("consigneeTel", ztoImportBcOrder.getconsigneeMobile());
        params.put("consigneeProvince", ztoImportBcOrder.getconsigneeProv());
        params.put("consigneeCity", ztoImportBcOrder.getconsigneeCity());
        params.put("consigneeCounty", ztoImportBcOrder.getconsigneeDistrict());
        params.put("consigneeAddress", ztoImportBcOrder.getconsigneeAddress());
        params.put("consigneeCountry", "CN"); // 收件人国别代码，必填
        
        // 包裹信息 - 确保重量格式与对方一致
        BigDecimal weight = ztoImportBcOrder.getweight();
        if (weight != null) {
            // 使用stripTrailingZeros()去除尾随零，确保格式与对方一致
            params.put("packageWeight", weight.stripTrailingZeros());
        }
        // 注意：不添加remark字段，因为对方的签名中没有包含此字段
        
        // 商品信息 - 使用API要求的字段名orderItems
        List<Map<String, Object>> orderItems = new ArrayList<>();
        if (ztoIntlOrderItemList != null && !ztoIntlOrderItemList.isEmpty()) {
            for (ZtoIntlOrderItem item : ztoIntlOrderItemList) {
                if (item != null) {
                    Map<String, Object> orderItem = new HashMap<>();
                    orderItem.put("goodName", item.getitemName()); // API要求字段名
                    orderItem.put("piece", item.getitemQuantity()); // API要求字段名
                    // 使用BigDecimal确保price格式精确
                    BigDecimal price = item.getitemUnitPrice();
                    if (price != null) {
                        orderItem.put("price", price);
                    }
                    // orderItem.put("grossWeight", item.getitemWeight()); // 毛重，API字段名,我方没有这个值
                    orderItem.put("currencySystem", item.getcurrencyType()); // 币制
                    orderItem.put("reportUnit", item.getitemUnit()); // 申报计量单位
                    orderItems.add(orderItem);
                }
            }
        }
        // 确保orderItems不为空数组，API要求必填
        if (orderItems.isEmpty()) {
            Map<String, Object> defaultItem = new HashMap<>();
            defaultItem.put("goodName", "商品");
            defaultItem.put("piece", 1);
            defaultItem.put("price", new BigDecimal("1.00000000"));
            defaultItem.put("currencySystem", "CNY"); // 使用CNY币制
            defaultItem.put("reportUnit", "件");
            orderItems.add(defaultItem);
        }
        params.put("orderItems", orderItems);
        
        return params;
    }
    
    /**
     * 提取有用的错误信息
     * @param rawMessage 原始错误消息
     * @param rawData 原始错误数据
     * @return 提取后的错误信息
     */
    private String extractErrorMessage(String rawMessage, String rawData) {
        if (rawMessage == null) {
            return "未知错误";
        }
        
        // 提取QhException:后面的内容
        if (rawMessage.contains("QhException:")) {
            String[] parts = rawMessage.split("QhException:");
            if (parts.length > 1) {
                String qhExceptionContent = parts[1].trim();
                // 清理掉可能的堆栈信息，取到第一个换行符或制表符
                int endIndex = qhExceptionContent.indexOf('\n');
                if (endIndex == -1) {
                    endIndex = qhExceptionContent.indexOf('\t');
                }
                if (endIndex != -1) {
                    qhExceptionContent = qhExceptionContent.substring(0, endIndex);
                }
                return qhExceptionContent.trim();
            }
        }
        
        // 如果没有QhException，返回原始消息
        return rawMessage;
    }


	// END EXTRA CODE
}
