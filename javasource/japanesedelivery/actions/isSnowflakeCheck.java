// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package japanesedelivery.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class isSnowflakeCheck extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String numericString;

	public isSnowflakeCheck(IContext context, java.lang.String numericString)
	{
		super(context);
		this.numericString = numericString;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			long snowflakeId = Long.parseLong(numericString.trim());
			// long timestamp = (snowflakeId >> TIMESTAMP_SHIFT) & ((1L << TIMESTAMP_BITS) - 1);
			long dataCenterId = (snowflakeId >> DATACENTER_ID_SHIFT) & MAX_DATACENTER_ID;
			long workerId = (snowflakeId >> WORKER_ID_SHIFT) & MAX_WORKER_ID;
			// Check if the number has exactly 19 digits
			if (numericString.trim().length() == 19 && dataCenterId==27 && workerId==27) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			return false;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "isSnowflakeCheck";
	}

	// BEGIN EXTRA CODE
	private static final long TIMESTAMP_BITS = 41;
	private static final long DATACENTER_ID_BITS = 5;
	private static final long WORKER_ID_BITS = 5;
	private static final long SEQUENCE_BITS = 12;
	private static final long MAX_DATACENTER_ID = (1L << DATACENTER_ID_BITS) - 1;
	private static final long MAX_WORKER_ID = (1L << WORKER_ID_BITS) - 1;
	private static final long TIMESTAMP_SHIFT = DATACENTER_ID_BITS + WORKER_ID_BITS + SEQUENCE_BITS;
	private static final long DATACENTER_ID_SHIFT = WORKER_ID_BITS + SEQUENCE_BITS;
	private static final long WORKER_ID_SHIFT = SEQUENCE_BITS;
	// END EXTRA CODE
}
