// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package japanesedelivery.actions;

import cn.hutool.core.date.DateUtil;
import cn.hutool.json.JSONObject;
import cn.hutool.json.JSONUtil;
import cn.hutool.core.util.StrUtil;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.google.common.collect.Maps;
import com.zto.intl.common.model.PostBody;
import com.zto.intl.common.util.DesUtil;
import com.zto.intl.common.util.HttpInvoke;
import com.zto.intl.common.util.HttpUtil;
import com.zto.intl.common.util.MD5;
import java.io.IOException;
import java.util.*;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import japanesedelivery.proxies.ZtoIntlImportOrderResp;
import japanesedelivery.proxies.ZtoSaveTracksResp;

public class ZtoSaveTracks2 extends CustomJavaAction<IMendixObject>
{
	private java.lang.String deliveryTrackNo;
	private java.lang.String tracksMessage;
	private java.lang.String tracksTime;
	private java.lang.String action;
	private IMendixObject __channelConfig;
	private japanesedelivery.proxies.ChannelConfig channelConfig;

	public ZtoSaveTracks2(IContext context, java.lang.String deliveryTrackNo, java.lang.String tracksMessage, java.lang.String tracksTime, java.lang.String action, IMendixObject channelConfig)
	{
		super(context);
		this.deliveryTrackNo = deliveryTrackNo;
		this.tracksMessage = tracksMessage;
		this.tracksTime = tracksTime;
		this.action = action;
		this.__channelConfig = channelConfig;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.channelConfig = this.__channelConfig == null ? null : japanesedelivery.proxies.ChannelConfig.initialize(getContext(), __channelConfig);

		// BEGIN USER CODE
		ILogNode logger = Core.getLogger("JapaneseDelivery");
		String secretKey = channelConfig.getsecretKey();
		String code = "";
		String message = "";
		Boolean success = false;
		// 接口测试地址: https://izop-test.zt-express.com/oms/api
		// 接口生产地址: https://izop.zt-express.com/oms/api
		String urlAddress = channelConfig.geturlAddress();
		String saveTracksMethod = "saveTracks";
		IMendixObject respVO = Core.instantiate(getContext(), ZtoSaveTracksResp.getType());
		Map<String, Object> ztoSaveTracksMap = new HashMap<>();
		ztoSaveTracksMap.put("clientSource", channelConfig.getclientSource());
		ztoSaveTracksMap.put("clientType", channelConfig.getclientType());
		List<Map<String, Object>> ztoSaveTracksList = new ArrayList<>();
		Map<String, Object> ztoSaveTracksBodyMap = new HashMap<>();
		ztoSaveTracksBodyMap.put("action", StrUtil.removePrefix(action, "_"));
		ztoSaveTracksBodyMap.put("mailNo", deliveryTrackNo);
		ztoSaveTracksBodyMap.put("message", tracksMessage);
		ztoSaveTracksBodyMap.put("time", tracksTime); // 格式:yyyy-MM-dd HH:mm:ss
		ztoSaveTracksList.add(ztoSaveTracksBodyMap);
		ztoSaveTracksMap.put("data", ztoSaveTracksList);
		String invokeReq = JSONUtil.toJsonStr(ztoSaveTracksMap);
		try {
			String invokeResult = invokeZto(urlAddress, saveTracksMethod, channelConfig.getappCode(), secretKey, invokeReq);
			logger.info("ZTO " + saveTracksMethod + " response: " + invokeResult);
			JSONObject zTOResponseBody = new JSONObject(invokeResult);
			success = (Boolean) zTOResponseBody.get("success");
			if (!success) {
				JSONObject errorBody = new JSONObject(zTOResponseBody.get("error"));
				logger.info("ZTO " + saveTracksMethod + " false, response: " + invokeResult);
				if (errorBody != null) {
					JSONObject zTOResponseError = new JSONObject(errorBody);
					code = ((String) zTOResponseError.get("code"));
					message = ((String) zTOResponseError.get("message"));
				}
			}
		} catch (IOException e) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Error while making HTTP request: " + e.getMessage(), e);
		} catch (Exception e) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Abnormal interface of the courier company!" + e.getMessage(), e);
		}
		respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.message), message);
		respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.code), code);
		respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.success), success);
		return respVO;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ZtoSaveTracks2";
	}

	// BEGIN EXTRA CODE
	public String invokeZto(String uri, String method, String appCode, String secretKey, String data) throws Exception {
		ILogNode logger = Core.getLogger("JapaneseDelivery");
		long timestamp = System.currentTimeMillis();
		String url = buildUrl(uri, method, appCode, timestamp);
		String encodeData = getEncodeData(secretKey, data, timestamp);
		logger.info("ZTO request " + method + " : url:" + url + "; request Data: " + data + "; encode Data: " + encodeData);
		return HttpUtil.sendPostJson(url, encodeData);
	}

	private static String buildUrl(String uri, String method, String appCode, Long timestamp) throws IOException {
		Map<String, Object> map = Maps.newHashMap();
		map.put("method", method);
		map.put("timestamp", timestamp);
		map.put("appCode", appCode);
		return HttpUtil.buildRealUrl(uri, map, "UTF-8");
	}

	public static String getEncodeData(String secretKey, String data, long timestamp) throws Exception {
		String sendData = getSendData(secretKey, data, timestamp);
		DesUtil desUtil = DesUtil.setDesKey(secretKey);
		return desUtil.encode(sendData);
	}

	private static String getSendData(String secretKey, String data, long timestamp) throws Exception {
		PostBody body = new PostBody();
		body.setSign(getSign(secretKey, data, timestamp));
		body.setData(data);
		return JSONUtil.toJsonStr(body);
	}

	private static String getSign(String secretKey, String data, long timestamp) throws Exception {
		String md5Encode = timestamp + secretKey + data;
		return MD5.MD5Encode(md5Encode);
	}
	// END EXTRA CODE
}
