// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package japanesedelivery.actions;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;

import japanesedelivery.proxies.ZtoImportBcOrder;
import japanesedelivery.proxies.ZtoIntlImportOrderResp;
import japanesedelivery.proxies.ZtoIntlOrderItem;
import japanesedelivery.proxies.ZtoOrderEntity;
import java.io.IOException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class QunhuiAddImportOrder extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __ztoImportBcOrder;
	private japanesedelivery.proxies.ZtoImportBcOrder ztoImportBcOrder;
	private java.util.List<IMendixObject> __ztoIntlOrderItemList;
	private java.util.List<japanesedelivery.proxies.ZtoIntlOrderItem> ztoIntlOrderItemList;
	private IMendixObject __ztoOrderEntity;
	private japanesedelivery.proxies.ZtoOrderEntity ztoOrderEntity;
	private IMendixObject __channelConfig;
	private japanesedelivery.proxies.ChannelConfig channelConfig;

	public QunhuiAddImportOrder(IContext context, IMendixObject ztoImportBcOrder, java.util.List<IMendixObject> ztoIntlOrderItemList, IMendixObject ztoOrderEntity, IMendixObject channelConfig)
	{
		super(context);
		this.__ztoImportBcOrder = ztoImportBcOrder;
		this.__ztoIntlOrderItemList = ztoIntlOrderItemList;
		this.__ztoOrderEntity = ztoOrderEntity;
		this.__channelConfig = channelConfig;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.ztoImportBcOrder = this.__ztoImportBcOrder == null ? null : japanesedelivery.proxies.ZtoImportBcOrder.initialize(getContext(), __ztoImportBcOrder);

		this.ztoIntlOrderItemList = java.util.Optional.ofNullable(this.__ztoIntlOrderItemList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__ztoIntlOrderItemListElement -> japanesedelivery.proxies.ZtoIntlOrderItem.initialize(getContext(), __ztoIntlOrderItemListElement))
			.collect(java.util.stream.Collectors.toList());

		this.ztoOrderEntity = this.__ztoOrderEntity == null ? null : japanesedelivery.proxies.ZtoOrderEntity.initialize(getContext(), __ztoOrderEntity);

		this.channelConfig = this.__channelConfig == null ? null : japanesedelivery.proxies.ChannelConfig.initialize(getContext(), __channelConfig);

		// BEGIN USER CODE
        Map<String, Object> orderParams = createQunhuiOrderParams(ztoImportBcOrder, ztoOrderEntity, ztoIntlOrderItemList);
        ILogNode logger = Core.getLogger("JapaneseDelivery");
        String secretKey = channelConfig.getsecretKey();
        String appKey = channelConfig.getappCode();

        String code = "";
        String message = "";
        String messageDetail = "";
        String logisticsId = "";
        String orderId = "";
        String orderNo = "";
        String extended = "";
        String mark = "";

        // 群辉接口地址
        String urlAddress = channelConfig.geturlAddress();
        String apiPath = "/qh-ocenter-api-web/api/expressorder/expressno";
        IMendixObject respVO = Core.instantiate(getContext(), ZtoIntlImportOrderResp.getType());
        try {
            String invokeResult = invokeQunhui(urlAddress + apiPath, appKey, secretKey, orderParams);
            logger.info("Qunhui API response: " + invokeResult);
            
            JSONObject responseBody = JSONObject.parseObject(invokeResult);
            Boolean success = (Boolean) responseBody.get("success");
            Integer responseCode = (Integer) responseBody.get("code");
            
            if (success && responseCode == 0) {
                JSONObject data = (JSONObject) responseBody.get("data");
                if (data != null) {
                    logisticsId = (String) data.get("expressNo");
                    orderId = (String) data.get("cusOrderNo");
                    orderNo = (String) data.get("orderNo");
                    mark = (String) data.get("twoDimensionCode");
                    extended = (String) data.get("printUrl");
                }
            } else {
                code = String.valueOf(responseCode);
                message = (String) responseBody.get("msg");
                messageDetail = message;
            }
            
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.logisticsId), logisticsId);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.orderId), orderId);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.orderNo), orderNo);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.extended), extended);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.mark), mark);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.message), message);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.messageDetail), messageDetail);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.code), code);
            respVO.setValue(getContext(), String.valueOf(ZtoIntlImportOrderResp.MemberNames.success), success && responseCode == 0);
            return respVO;
        } catch (Exception e) {
            logger.error("Qunhui API call failed: " + e.getMessage(), e);
            throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Abnormal interface of the courier company!");
        }
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "QunhuiAddImportOrder";
	}

	// BEGIN EXTRA CODE
    public String invokeQunhui(String url, String appKey, String secretKey, Map<String, Object> params) throws Exception {
        ILogNode logger = Core.getLogger("JapaneseDelivery");
        
        // 生成时间戳
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String timestamp = sdf.format(new Date());
        
        // 生成签名
        String sign = generateSign(params, secretKey);
        
        // 构建请求体
        String requestBody = com.alibaba.fastjson.JSONObject.toJSONString(params, SerializerFeature.MapSortField);
        
        logger.info("Qunhui request: url=" + url + "; params=" + requestBody + "; sign=" + sign);
        
        // 发送HTTP请求
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Content-Type", "application/json")
                .header("app_key", appKey)
                .header("sign", sign)
                .header("timestamp", timestamp)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody, StandardCharsets.UTF_8))
                .build();
        
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        return response.body();
    }
    
    private String generateSign(Map<String, Object> params, String secretKey) throws Exception {
        // 使用TreeMap自动按ASCII码排序
        TreeMap<String, Object> sortedParams = new TreeMap<>();
        for (Map.Entry<String, Object> entry : params.entrySet()) {
            // 忽略null值
            if (entry.getValue() != null) {
                sortedParams.put(entry.getKey(), entry.getValue());
            }
        }
        
        // 转换为JSON字符串
        String jsonString = com.alibaba.fastjson.JSONObject.toJSONString(sortedParams, SerializerFeature.MapSortField);
        
        // 生成MD5签名: md5(密钥+JsonString+密钥)
        String signData = secretKey + jsonString + secretKey;
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] digest = md.digest(signData.getBytes(StandardCharsets.UTF_8));
        
        // 转换为32位大写字符串
        StringBuilder sb = new StringBuilder();
        for (byte b : digest) {
            sb.append(String.format("%02X", b));
        }
        return sb.toString();
    }

    private static Map<String, Object> createQunhuiOrderParams(ZtoImportBcOrder ztoImportBcOrder, ZtoOrderEntity ztoOrderEntity, java.util.List<ZtoIntlOrderItem> ztoIntlOrderItemList) throws Exception {
        // 创建群辉API参数
        Map<String, Object> params = new HashMap<>();
        
        // 基本订单信息
        params.put("cusOrderNo", ztoImportBcOrder.getorderId());
        params.put("orderType", "1"); // 订单类型，默认为1
        
        // 发件人信息
        params.put("senderName", ztoImportBcOrder.getshipper());
        params.put("senderPhone", ztoImportBcOrder.getshipperMobile());
        params.put("senderProvince", ztoImportBcOrder.getshipperProv());
        params.put("senderCity", ztoImportBcOrder.getshipperCity());
        params.put("senderArea", ztoImportBcOrder.getshipperDistrict());
        params.put("senderAddress", ztoImportBcOrder.getshipperAddress());
        
        // 收件人信息
        params.put("receiverName", ztoImportBcOrder.getconsignee());
        params.put("receiverPhone", ztoImportBcOrder.getconsigneeMobile());
        params.put("receiverProvince", ztoImportBcOrder.getconsigneeProv());
        params.put("receiverCity", ztoImportBcOrder.getconsigneeCity());
        params.put("receiverArea", ztoImportBcOrder.getconsigneeDistrict());
        params.put("receiverAddress", ztoImportBcOrder.getconsigneeAddress());
        
        // 包裹信息
        params.put("weight", ztoImportBcOrder.getweight());
        params.put("remark", ztoOrderEntity.getremark());
        
        // 商品信息
        List<Map<String, Object>> goodsList = new ArrayList<>();
        for (ZtoIntlOrderItem item : ztoIntlOrderItemList) {
            Map<String, Object> goods = new HashMap<>();
            goods.put("goodsName", item.getitemName());
            goods.put("goodsQuantity", item.getitemQuantity());
            goods.put("goodsPrice", item.getitemUnitPrice());
            goods.put("goodsWeight", 0.1); // 默认重量
            goodsList.add(goods);
        }
        params.put("goodsList", goodsList);
        
        return params;
    }


	// END EXTRA CODE
}
