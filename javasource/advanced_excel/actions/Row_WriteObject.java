// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import advanced_excel.proxies.CellType;
import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.core.objectmanagement.member.*;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Create a row with data of an object
 */
public class Row_WriteObject extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String SheetName;
	private IMendixObject ObjectInput;
	private java.lang.Long RowNb;
	private java.lang.String Attributes;
	private IMendixObject __CellFormat;
	private advanced_excel.proxies.CellFormat CellFormat;

	public Row_WriteObject(IContext context, java.lang.String SheetName, IMendixObject ObjectInput, java.lang.Long RowNb, java.lang.String Attributes, IMendixObject CellFormat)
	{
		super(context);
		this.SheetName = SheetName;
		this.ObjectInput = ObjectInput;
		this.RowNb = RowNb;
		this.Attributes = Attributes;
		this.__CellFormat = CellFormat;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.CellFormat = this.__CellFormat == null ? null : advanced_excel.proxies.CellFormat.initialize(getContext(), __CellFormat);

		// BEGIN USER CODE
		try
		{
			DocumentType docType = Utils.GetDocumentType();
			Workbook workbook = Utils.GetWorkBook();
			IContext context = this.getContext();
			
			Sheet sheet;
			Row row;
			Cell cell;
			CellStyle style;
			CellStyle wrapStyle;
			CellStyle dateStyle;
			CellType cellType;
			if (docType == DocumentType.XLS) {
				sheet = ((HSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				style = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				
				dateStyle = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, dateStyle, this.CellFormat, docType);
				dateStyle.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				
				wrapStyle = ((HSSFWorkbook)workbook).createCellStyle();
				wrapStyle.cloneStyleFrom(style);
				wrapStyle.setWrapText(true);
				
				row = ((HSSFSheet)sheet).getRow(RowNb.intValue());
				if (row == null) {
					row = ((HSSFSheet)sheet).createRow(RowNb.intValue());
				}
			} else {
				sheet = ((XSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				style = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				
				dateStyle = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, dateStyle, this.CellFormat, docType);
				dateStyle.setDataFormat(workbook.getCreationHelper().createDataFormat().getFormat("yyyy-MM-dd HH:mm:ss"));
				
				wrapStyle = ((XSSFWorkbook)workbook).createCellStyle();
				wrapStyle.cloneStyleFrom(style);
				wrapStyle.setWrapText(true);
				
				row = ((XSSFSheet)sheet).getRow(RowNb.intValue());
				if (row == null) {
					row = ((XSSFSheet)sheet).createRow(RowNb.intValue());
				}
			}
			
			String[] attributes = Attributes == null ? new String[0] : Attributes.split(";");
			for (int i = 0; i < attributes.length; i++) {
				List<IMendixObject> curObjs = Arrays.asList(ObjectInput);
				String attr = attributes[i];
				
				if (attr.contains("/")) {
					String[] paths = attr.split("/");
					int attPos = paths.length - 1;
					for (int j = 0; j < attPos; j++) {
						List<IMendixObject> objs = Core.retrieveByPath(context, curObjs.get(0), paths[j]);
						if (objs.size() > 1 && j < attPos - 1) { throw new Exception("too much associated object found: " + paths[i] + "\nPath: " + attr); }
						else if (objs.size() == 0) { curObjs = null; continue; }
						
						curObjs = objs;
					}
					attr = paths[attPos];
				}
				if (curObjs == null) { continue; }
				
				IMendixObjectMember<?> m = curObjs.get(0).getMember(context, attr);
				if (m.isVirtual()) {
					continue;
				}
				if (m instanceof MendixAutoNumber) {
					continue;
				}
				
				String valStr = "";
				var val = m.getValue(context);
				if (curObjs.size() > 1) {
					for (int j = 0; j < curObjs.size(); j++) {
						val = curObjs.get(j).getMember(context, attr).getValue(context);
						valStr = (j == 0 ? "" : valStr + ";") + (val == null ? "" : val.toString());
					}
				} else {
					valStr = val == null ? "" : val.toString();
				}
				
				cellType = CellType.text;
				if (curObjs.size() > 1) { cellType = CellType.text; }
				else if (m instanceof MendixInteger) { cellType = CellType.integer; }
				else if (m instanceof MendixBoolean) { cellType = CellType._boolean; }
				else if (m instanceof MendixDecimal) { cellType = CellType.decimal; }
				else if (m instanceof MendixLong) { cellType = CellType.integer; }
				else if (m instanceof MendixDateTime) {
					cellType = CellType.datetime;
					DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
					valStr = val == null ? "" : dateFormat.format((Date)val);
				}
				else { cellType = CellType.text; }
				
				if (docType == DocumentType.XLS) {
					cell = ((HSSFRow)row).getCell(i);
					if (cell == null) {
						cell = ((HSSFRow)row).createCell(i);
					}
				} else {
					cell = ((XSSFRow)row).getCell(i);
					if (cell == null) {
						cell = ((XSSFRow)row).createCell(i);
					}
				}
				Utils.SetCellValue(workbook, cell, cellType, valStr);
				if (cellType == CellType.datetime) {
					cell.setCellStyle(dateStyle);
				} else if (valStr != null && valStr.indexOf('\n') != -1) {
					cell.setCellStyle(wrapStyle);
				} else if (this.CellFormat != null) {
					cell.setCellStyle(style);
				}
			}
			return true;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.Row_WriteObject: " + e.getMessage() + "\n" + e.toString(), e);
			return false;
		} 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Row_WriteObject";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	// END EXTRA CODE
}
