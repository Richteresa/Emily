// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import java.io.IOException;
import advanced_excel.proxies.CellType;
import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Write a list string values in a row
 */
public class Worksheet_WriteValues extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String SheetName;
	private java.lang.Long RowNb;
	private java.lang.String Values;
	private IMendixObject __CellFormat;
	private advanced_excel.proxies.CellFormat CellFormat;

	public Worksheet_WriteValues(IContext context, java.lang.String SheetName, java.lang.Long RowNb, java.lang.String Values, IMendixObject CellFormat)
	{
		super(context);
		this.SheetName = SheetName;
		this.RowNb = RowNb;
		this.Values = Values;
		this.__CellFormat = CellFormat;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.CellFormat = this.__CellFormat == null ? null : advanced_excel.proxies.CellFormat.initialize(getContext(), __CellFormat);

		// BEGIN USER CODE
		try
		{
			DocumentType docType = Utils.GetDocumentType();
			Workbook workbook = Utils.GetWorkBook();
			String[] values = Values == null ? new String[0] : Values.split(";");
			
			Sheet sheet;
			Row row;
			Cell cell;
			CellStyle style;
			CellStyle wrapStyle;
			if (docType == DocumentType.XLS) {
				sheet = ((HSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				style = ((HSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				
				wrapStyle = ((HSSFWorkbook)workbook).createCellStyle();
				wrapStyle.cloneStyleFrom(style);
				wrapStyle.setWrapText(true);
				
				row = ((HSSFSheet)sheet).getRow(RowNb.intValue());
				if (row == null) {
					row = ((HSSFSheet)sheet).createRow(RowNb.intValue());
				}
			} else {
				sheet = ((XSSFWorkbook)workbook).getSheet(this.SheetName);
				if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
				
				style = ((XSSFWorkbook)workbook).createCellStyle();
				Utils.CreateStyle(workbook, style, this.CellFormat, docType);
				
				wrapStyle = ((XSSFWorkbook)workbook).createCellStyle();
				wrapStyle.cloneStyleFrom(style);
				wrapStyle.setWrapText(true);
				
				row = ((XSSFSheet)sheet).getRow(RowNb.intValue());
				if (row == null) {
					row = ((XSSFSheet)sheet).createRow(RowNb.intValue());
				}
			}
			
			for (int i = 0; i < values.length; i++) {
				if (docType == DocumentType.XLS) {
					cell = ((HSSFRow)row).getCell(i);
					if (cell == null) {
						cell = ((HSSFRow)row).createCell(i);
					}
				} else {
					cell = ((XSSFRow)row).getCell(i);
					if (cell == null) {
						cell = ((XSSFRow)row).createCell(i);
					}
				}
					
				String valStr = values[i];
				Utils.SetCellValue(workbook, cell, CellType.text, valStr);
				if (valStr != null && valStr.indexOf('\n') != -1) {
					cell.setCellStyle(wrapStyle);
				} else if (this.CellFormat != null) {
					cell.setCellStyle(style);
				}
			}
			return true;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.Cell_WriteRange: " + e.getMessage() + "\n" + e.toString(), e);
			return false;
		} 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Worksheet_WriteValues";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	// END EXTRA CODE
}
